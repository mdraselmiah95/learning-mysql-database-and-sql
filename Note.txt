* Numerical data Type:
1. SMALLINT
2. INT
3. BIGINT

4. FLOAT
5. DOUBLE(M,D)
6. DECIMAL(M,D)

* Character Type:
1. CHAR(M)
2. VARCHAR(M)
3. TEXT

* Date and Time data Type:
1. YEAR(YYYY)
2. DATE(YYYY-MM-DD)
3. TIME(HH:MM:SS)

* Some other data Type:
1. BLOB =>binary large object
2. Logical


TODO: MySQL CREATE TABLE Statement:
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype,
   ....
);
CREATE TABLE Persons (
    PersonID int,
    LastName varchar(255),
    FirstName varchar(255),
    Address varchar(255),
    City varchar(255)
);


TODO: The SQL SELECT Statement:
SELECT column1, column2, ...
FROM table_name;

SELECT * FROM table_name;

TODO: SELECT DISTINCT Statement 
The SELECT DISTINCT statement is used to return only distinct (different) values.
SELECT DISTINCT column1, column2, ...
FROM table_name;

TODO: ORDER BY Keyword
The ORDER BY keyword is used to sort the result-set in ascending or descending order.
SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;

TODO: Arithmetic Operator
+, -, *, /, %

TODO: Comparison Operator
=, !=, >, <=, >, >=, BETWEEN

TODO: Logical Operator
LOGICAL OPERATORS?
ALL	    (TRUE if all of the subquery values meet the condition)	
AND	    (TRUE if all the conditions separated by AND is TRUE)	
ANY	    (TRUE if any of the subquery values meet the condition)	
BETWEEN	(TRUE if the operand is within the range of comparisons)	
EXISTS	(TRUE if the subquery returns one or more records)
IN	    (TRUE if the operand is equal to one of a list of expressions)	
LIKE	(TRUE if the operand matches a pattern)	
NOT	    (Displays a record if the condition(s) is NOT TRUE)	
OR	    (TRUE if any of the conditions separated by OR is TRUE)	
SOME	(TRUE if any of the subquery values meet the condition)

TODO: Logical Operator AND, OR, IN, NOT, LIKE Examples:

SELECT * 
FROM students_details
WHERE City="Dhaka"
		OR
        City="Sylhet"
        OR
        City="Khulna"

SELECT *
FROM students_details
WHERE City IN ('Sylhet','Dhaka','Jessore');

SELECT *
FROM students_details
WHERE City NOT IN ('Sylhet','Dhaka','Jessore');

SELECT * 
FROM students_details
WHERE Name LIKE 'S%';

SELECT * 
FROM students_details
WHERE Name LIKE '_a%';

TODO: As Keyword For Custom Name Examples:

SELECT Roll AS ID,Name AS 'First Name'
FROM students_details

TODO: Constraint, Auto_Increment Examples:
CREATE TABLE teacher
(
	ID int NOT NULL AUTO_INCREMENT,
    Name varChar(15) NOT NULL,
    Salary double(10,2)
    PRIMARY KEY(ID)
)

TODO: Update Statement:
UPDATE teacher
SET Salary=31000
WHERE ID=107

UPDATE teacher SET Name="Md Kisar Rahmia" WHERE ID=107;

UPDATE teacher SET Salary = Salary + 5000 WHERE Salary > 15000;

SELECT UPPER(City) AS City_NEW_NAME
FROM students_details;

TODO: Function: UPPER(), LOWER(), CONCAT(), POW(), GREATEST(), LEAST(), LOG(), LOG10(), EXP(), RAND()
SELECT CONCAT('SQL', ' is', ' fun!');

SELECT CONCAT(Name," Is ",Age,"Years old")
FROM students_details

SELECT GREATEST(3, 12, 34, 8, 25);

SELECT LEAST(3, 12, 34, 8, 25);

SELECT POWER(2,3);
SELECT TRUNCATE(10.3554,2)
SELECT TRUNCATE(LOG(2),2)
Video=> 02:08 The Good

TODO: An aggregate function performs a calculation on a set of values, and returns a single value.
AVG – calculates the average of a set of values.
COUNT – counts rows in a specified table or view.
MIN – gets the minimum value in a set of values.
MAX – gets the maximum value in a set of values.
SUM – calculates the sum of values.